// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: proto/reductor.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReductorService_AddLink_FullMethodName         = "/reductor.ReductorService/AddLink"
	ReductorService_Ping_FullMethodName            = "/reductor.ReductorService/Ping"
	ReductorService_GetLongLink_FullMethodName     = "/reductor.ReductorService/GetLongLink"
	ReductorService_HandleBatchJSON_FullMethodName = "/reductor.ReductorService/HandleBatchJSON"
	ReductorService_AsURLExists_FullMethodName     = "/reductor.ReductorService/AsURLExists"
	ReductorService_FetchURLs_FullMethodName       = "/reductor.ReductorService/FetchURLs"
	ReductorService_DelURLs_FullMethodName         = "/reductor.ReductorService/DelURLs"
	ReductorService_GetStatsSvc_FullMethodName     = "/reductor.ReductorService/GetStatsSvc"
)

// ReductorServiceClient is the client API for ReductorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Определение сервиса
type ReductorServiceClient interface {
	AddLink(ctx context.Context, in *LinkUsrReq, opts ...grpc.CallOption) (*StrErrResp, error)
	Ping(ctx context.Context, in *StrReq, opts ...grpc.CallOption) (*ErrMess, error)
	GetLongLink(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*LongLinkResp, error)
	HandleBatchJSON(ctx context.Context, in *HandleBatchJSONReq, opts ...grpc.CallOption) (*SliceByteErrResp, error)
	AsURLExists(ctx context.Context, in *ErrMess, opts ...grpc.CallOption) (*BoolResp, error)
	FetchURLs(ctx context.Context, in *StrReq, opts ...grpc.CallOption) (*SliceByteErrResp, error)
	DelURLs(ctx context.Context, in *StrByteReq, opts ...grpc.CallOption) (*ErrMess, error)
	GetStatsSvc(ctx context.Context, in *StrReq, opts ...grpc.CallOption) (*SliceByteErrResp, error)
}

type reductorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReductorServiceClient(cc grpc.ClientConnInterface) ReductorServiceClient {
	return &reductorServiceClient{cc}
}

func (c *reductorServiceClient) AddLink(ctx context.Context, in *LinkUsrReq, opts ...grpc.CallOption) (*StrErrResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StrErrResp)
	err := c.cc.Invoke(ctx, ReductorService_AddLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reductorServiceClient) Ping(ctx context.Context, in *StrReq, opts ...grpc.CallOption) (*ErrMess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrMess)
	err := c.cc.Invoke(ctx, ReductorService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reductorServiceClient) GetLongLink(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*LongLinkResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LongLinkResp)
	err := c.cc.Invoke(ctx, ReductorService_GetLongLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reductorServiceClient) HandleBatchJSON(ctx context.Context, in *HandleBatchJSONReq, opts ...grpc.CallOption) (*SliceByteErrResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SliceByteErrResp)
	err := c.cc.Invoke(ctx, ReductorService_HandleBatchJSON_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reductorServiceClient) AsURLExists(ctx context.Context, in *ErrMess, opts ...grpc.CallOption) (*BoolResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolResp)
	err := c.cc.Invoke(ctx, ReductorService_AsURLExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reductorServiceClient) FetchURLs(ctx context.Context, in *StrReq, opts ...grpc.CallOption) (*SliceByteErrResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SliceByteErrResp)
	err := c.cc.Invoke(ctx, ReductorService_FetchURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reductorServiceClient) DelURLs(ctx context.Context, in *StrByteReq, opts ...grpc.CallOption) (*ErrMess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrMess)
	err := c.cc.Invoke(ctx, ReductorService_DelURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reductorServiceClient) GetStatsSvc(ctx context.Context, in *StrReq, opts ...grpc.CallOption) (*SliceByteErrResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SliceByteErrResp)
	err := c.cc.Invoke(ctx, ReductorService_GetStatsSvc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReductorServiceServer is the server API for ReductorService service.
// All implementations must embed UnimplementedReductorServiceServer
// for forward compatibility.
//
// Определение сервиса
type ReductorServiceServer interface {
	AddLink(context.Context, *LinkUsrReq) (*StrErrResp, error)
	Ping(context.Context, *StrReq) (*ErrMess, error)
	GetLongLink(context.Context, *IDReq) (*LongLinkResp, error)
	HandleBatchJSON(context.Context, *HandleBatchJSONReq) (*SliceByteErrResp, error)
	AsURLExists(context.Context, *ErrMess) (*BoolResp, error)
	FetchURLs(context.Context, *StrReq) (*SliceByteErrResp, error)
	DelURLs(context.Context, *StrByteReq) (*ErrMess, error)
	GetStatsSvc(context.Context, *StrReq) (*SliceByteErrResp, error)
	mustEmbedUnimplementedReductorServiceServer()
}

// UnimplementedReductorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReductorServiceServer struct{}

func (UnimplementedReductorServiceServer) AddLink(context.Context, *LinkUsrReq) (*StrErrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLink not implemented")
}
func (UnimplementedReductorServiceServer) Ping(context.Context, *StrReq) (*ErrMess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedReductorServiceServer) GetLongLink(context.Context, *IDReq) (*LongLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLongLink not implemented")
}
func (UnimplementedReductorServiceServer) HandleBatchJSON(context.Context, *HandleBatchJSONReq) (*SliceByteErrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleBatchJSON not implemented")
}
func (UnimplementedReductorServiceServer) AsURLExists(context.Context, *ErrMess) (*BoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsURLExists not implemented")
}
func (UnimplementedReductorServiceServer) FetchURLs(context.Context, *StrReq) (*SliceByteErrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchURLs not implemented")
}
func (UnimplementedReductorServiceServer) DelURLs(context.Context, *StrByteReq) (*ErrMess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelURLs not implemented")
}
func (UnimplementedReductorServiceServer) GetStatsSvc(context.Context, *StrReq) (*SliceByteErrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatsSvc not implemented")
}
func (UnimplementedReductorServiceServer) mustEmbedUnimplementedReductorServiceServer() {}
func (UnimplementedReductorServiceServer) testEmbeddedByValue()                         {}

// UnsafeReductorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReductorServiceServer will
// result in compilation errors.
type UnsafeReductorServiceServer interface {
	mustEmbedUnimplementedReductorServiceServer()
}

func RegisterReductorServiceServer(s grpc.ServiceRegistrar, srv ReductorServiceServer) {
	// If the following call pancis, it indicates UnimplementedReductorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReductorService_ServiceDesc, srv)
}

func _ReductorService_AddLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkUsrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReductorServiceServer).AddLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReductorService_AddLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReductorServiceServer).AddLink(ctx, req.(*LinkUsrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReductorService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReductorServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReductorService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReductorServiceServer).Ping(ctx, req.(*StrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReductorService_GetLongLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReductorServiceServer).GetLongLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReductorService_GetLongLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReductorServiceServer).GetLongLink(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReductorService_HandleBatchJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleBatchJSONReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReductorServiceServer).HandleBatchJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReductorService_HandleBatchJSON_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReductorServiceServer).HandleBatchJSON(ctx, req.(*HandleBatchJSONReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReductorService_AsURLExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrMess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReductorServiceServer).AsURLExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReductorService_AsURLExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReductorServiceServer).AsURLExists(ctx, req.(*ErrMess))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReductorService_FetchURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReductorServiceServer).FetchURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReductorService_FetchURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReductorServiceServer).FetchURLs(ctx, req.(*StrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReductorService_DelURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrByteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReductorServiceServer).DelURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReductorService_DelURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReductorServiceServer).DelURLs(ctx, req.(*StrByteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReductorService_GetStatsSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReductorServiceServer).GetStatsSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReductorService_GetStatsSvc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReductorServiceServer).GetStatsSvc(ctx, req.(*StrReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ReductorService_ServiceDesc is the grpc.ServiceDesc for ReductorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReductorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reductor.ReductorService",
	HandlerType: (*ReductorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLink",
			Handler:    _ReductorService_AddLink_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ReductorService_Ping_Handler,
		},
		{
			MethodName: "GetLongLink",
			Handler:    _ReductorService_GetLongLink_Handler,
		},
		{
			MethodName: "HandleBatchJSON",
			Handler:    _ReductorService_HandleBatchJSON_Handler,
		},
		{
			MethodName: "AsURLExists",
			Handler:    _ReductorService_AsURLExists_Handler,
		},
		{
			MethodName: "FetchURLs",
			Handler:    _ReductorService_FetchURLs_Handler,
		},
		{
			MethodName: "DelURLs",
			Handler:    _ReductorService_DelURLs_Handler,
		},
		{
			MethodName: "GetStatsSvc",
			Handler:    _ReductorService_GetStatsSvc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reductor.proto",
}
